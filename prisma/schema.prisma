// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CommonStatus {
  PENDING // 대기
  SUCCESS // 성공
  FAILED // 실패
	@@map("CommonStatus")
}

/// 토큰 타입 정의
/// 시스템에서 사용되는 모든 토큰의 타입을 관리
model TokenType {
  /// 토큰 타입 고유 식별자
  id          Int      @id @default(autoincrement())
  /// 토큰 심볼 (예: POINT, CREDIT, COIN)
  symbol      String   @unique
  ///1개당 가격(KRW)
  price       Decimal  @db.Decimal(18, 4)
  /// 토큰 표시명 (예: 포인트, 크레딧, 코인)
  name        String
  /// 토큰 타입에 대한 상세 설명
  description String?
  /// 생성 일시
  created_at  DateTime @default(now())
  /// 수정 일시
  updated_at  DateTime @updatedAt

  // 관계
  wallets     Wallet[]
  transfers   Transfer[]

  @@map("token_types")
}

/// 토큰 지갑
/// 실제 토큰이 보관되는 지갑
model Wallet {
  /// 지갑 고유 식별자
  id             Int          @id @default(autoincrement())
  /// 지갑 주소 (UUID)
  address        String       @unique
  /// 토큰 타입 ID
  token_type_id  Int
  /// 보유 수량
  amount         Decimal      @default(0) @db.Decimal(18, 4)
  /// 생성 일시
  created_at     DateTime     @default(now())
  /// 수정 일시
  updated_at     DateTime     @updatedAt

  // 관계
  token_type     TokenType    @relation(fields: [token_type_id], references: [id])
  ownerships     WalletOwnership[]
  transfers_from Transfer[] @relation("FromWallet")
  transfers_to   Transfer[] @relation("ToWallet")

  @@map("wallets")
}

/// 지갑 소유권
/// 지갑의 소유권 정보를 관리
model WalletOwnership {
  /// 소유권 고유 식별자
  id             Int          @id @default(autoincrement())
  /// 지갑 ID
  wallet_id      Int
  /// 소유자 아이디 (Cognito의 userSub)
  owner_id  String
  /// 소유권 시작 일시
  started_at     DateTime     @default(now())
  /// 소유권 종료 일시 (null인 경우 현재 소유 중)
  ended_at       DateTime?
  /// 생성 일시
  created_at     DateTime     @default(now())
  /// 수정 일시
  updated_at     DateTime     @updatedAt

  // 관계
  wallet         Wallet       @relation(fields: [wallet_id], references: [id])

  @@unique([wallet_id, owner_id, started_at])
  @@map("wallet_ownerships")
}

/// 전송 로그
/// 모든 토큰 전송 내역을 기록

model Transfer {
  /// 전송 고유 식별자
  id                Int             @id @default(autoincrement())
  /// 트랜잭션 해시 (UUID)
  tx_hash           String          @unique
  /// 송신 지갑 ID
  from_wallet_id    Int
  /// 수신 지갑 ID
  to_wallet_id      Int
  /// 토큰 타입 ID
  token_type_id     Int
  /// 전송 수량
  amount            Decimal         @db.Decimal(18, 4)
  /// 전송 전 잔액 (송신자)
  from_balance_before    Decimal         @db.Decimal(18, 4)
  /// 전송 후 잔액 (송신자)
  from_balance_after     Decimal         @db.Decimal(18, 4)
  /// 전송 전 잔액 (수신자)
  to_balance_before    Decimal         @db.Decimal(18, 4)
  /// 전송 후 잔액 (수신자)
  to_balance_after     Decimal         @db.Decimal(18, 4)
  /// 전송 사유
  reason            Int             @db.TinyInt
  /// 관련 엔티티 ID (예: 상품 ID)
  reference_id      String?
  /// 전송 상태
  status            CommonStatus @default(PENDING)
  /// 생성 일시
  created_at        DateTime        @default(now())
  /// 수정 일시
  updated_at        DateTime        @updatedAt

  // 관계
  token_type        TokenType       @relation(fields: [token_type_id], references: [id])
  from_wallet       Wallet          @relation("FromWallet", fields: [from_wallet_id], references: [id])
  to_wallet         Wallet          @relation("ToWallet", fields: [to_wallet_id], references: [id])
  subscription      Subscription?   @relation(fields: [subscription_id], references: [id])
  subscription_id   Int?

  @@map("transfers")
  TransferReason TransferReason[]
}

/// 전송사유타입(초기 데이터인 seed 있음)
model TransferReason {
  /// 전송사유 고유 식별자
  id             Int          @id @default(autoincrement())
  /// 전송사유 이름
  name           String
  /// 전송사유 설명
  description    String?
  /// 생성 일시
  created_at     DateTime     @default(now())
  /// 수정 일시
  updated_at     DateTime     @updatedAt

  // 관계
  transfers     Transfer[]

  @@map("transfer_reasons")
}


enum PeriodUnit {
  DAY
  WEEK
  MONTH
  YEAR
  @@map("period_units")
}

/// 멤버십 상품
/// 크리에이터가 판매하는 멤버십 상품 정보를 관리
model MembershipItem {
  /// 멤버십 상품 고유 식별자
  id                    Int       @id @default(autoincrement())
  /// 멤버십 상품 이름
  name                  String
  /// 멤버십 레벨 (차등 열람을 위한 등급)
  level                 Int       @default(1)
  /// 크리에이터 ID (Cognito의 userSub)
  creator_id            String
  /// 가격 (KRW 기준)
  price                 Decimal   @db.Decimal(18, 4)
  /// 반복 결제 단위
  billing_unit          PeriodUnit
  /// 반복 결제 주기 상수 (예: 1개월, 3개월, 1년)
  billing_period        Int       @default(1)
  /// 무료 체험 기간 단위
  trial_unit            PeriodUnit
  /// 무료 체험 기간 상수 (예: 7일, 1개월)
  trial_period          Int?      @default(0)
  /// 생성 일시
  created_at            DateTime  @default(now())
  /// 수정 일시
  updated_at            DateTime  @updatedAt

  // 관계
  subscriptions         Subscription[]

  @@map("membership_items")
}

/// 구독 상태
enum SubscriptionStatus {
  ONGOING    // 진행 중
  EXPIRED    // 만료됨
  @@map("subscription_statuses")
}

/// 구독 정보
/// 크리에이터와 구독자 간의 구독 관계를 관리
model Subscription {
  /// 구독 고유 식별자
  id              Int       @id @default(autoincrement())
  /// 구독자 ID (Cognito의 userSub)
  subscriber_id   String
  /// 구독 시작 일시
  started_at      DateTime  @default(now())
  /// 구독 종료 일시 (null인 경우 현재 구독 중)
  ended_at        DateTime?
  /// 구독 상태
  status          SubscriptionStatus @default(ONGOING)
  /// 구독 금액
  amount          Decimal   @db.Decimal(18, 4)
  /// 자동 갱신 여부 (유저가 구독 취소시 자동 갱신여부가 false로 업데이트됨)
  auto_renew      Boolean   @default(true)
  /// 생성 일시
  created_at      DateTime  @default(now())
  /// 수정 일시
  updated_at      DateTime  @updatedAt

  // 관계
  membership_item MembershipItem @relation(fields: [membership_item_id], references: [id])
  membership_item_id Int
  transfers       Transfer[]

  @@unique([subscriber_id, membership_item_id, started_at])
  @@map("subscriptions")
}
